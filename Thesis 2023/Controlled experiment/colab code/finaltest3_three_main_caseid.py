# -*- coding: utf-8 -*-
"""finaltest3-three main caseid.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1y0Yrwwg6o0YMIBvLWyJeNtKy_x8xLeiG
"""

# Commented out IPython magic to ensure Python compatibility.
#6 caseid. 4 cons  3 month.  6 customerr.  2 emp two month. 4 emp the third monthh 

from google.colab import drive
drive.mount('/content/gdrive')
# %cd /content/gdrive/MyDrive/Finalproject/thesis-newlog-2023/finaltest3/

!pwd
!pip install pm4py
!pip install visualizer
!pip install algorithm

import pandas as pd
import pm4py

df=pd.read_csv('/content/gdrive/MyDrive/Finalproject/thesis-newlog-2023/finaltest3/finaltest3-threemonth.csv')

df

#Loan_ID

import pandas as pd
import pm4py
from pm4py.visualization.petri_net import visualizer
from pm4py.algo.decision_mining import algorithm as decision_mining
from pm4py.algo.evaluation.generalization import algorithm as generalization_evaluator
from pm4py.algo.evaluation.simplicity import algorithm as simplicity_evaluator



log_scv = pm4py.format_dataframe(df, case_id='case:concept:name', activity_key='Activity', timestamp_key='lifecycle:transition')
pm4py.write_xes(log_scv, '/content/gdrive/MyDrive/Finalproject/thesis-newlog-2023/finaltest3/ft3-loanID.xes')
log= pm4py.read_xes('/content/gdrive/MyDrive/Finalproject/thesis-newlog-2023/finaltest3/ft3-loanID.xes')


#Inductive miner: 
net, im, fm = pm4py.discover_petri_net_inductive(log)
gviz = visualizer.apply(net, im, fm, parameters={visualizer.Variants.WO_DECORATION.value.Parameters.DEBUG: True})
pm4py.view_petri_net(net, im, fm)
#Instance spanning constraints:
net, im, fm = decision_mining.create_data_petri_nets_with_decisions(log, net, im, fm)
gviz = visualizer.apply(net, im, fm, parameters={visualizer.Variants.WO_DECORATION.value.Parameters.DEBUG: True})
pm4py.view_petri_net(net, im, fm)

#Guards:
for t in net.transitions:
    if "guard" in t.properties:
        print("")
        print(t)
        print(t.properties["guard"])




fitness = pm4py.fitness_alignments(log, net, im, fm)
print("the fitness is:" , fitness)
prec = pm4py.precision_alignments(log, net, im, fm)
print("the precision is ", prec)

#Customer_ID

import pandas as pd
import pm4py
from pm4py.visualization.petri_net import visualizer
from pm4py.algo.decision_mining import algorithm as decision_mining
from pm4py.algo.evaluation.generalization import algorithm as generalization_evaluator
from pm4py.algo.evaluation.simplicity import algorithm as simplicity_evaluator



log_scv = pm4py.format_dataframe(df, case_id='CustomerID', activity_key='Activity', timestamp_key='lifecycle:transition')
pm4py.write_xes(log_scv, '/content/gdrive/MyDrive/Finalproject/thesis-newlog-2023/finaltest3/ft3-customerID.xes')
log= pm4py.read_xes('/content/gdrive/MyDrive/Finalproject/thesis-newlog-2023/finaltest3/ft3-customerID.xes')


#Inductive miner: 
net, im, fm = pm4py.discover_petri_net_inductive(log)
gviz = visualizer.apply(net, im, fm, parameters={visualizer.Variants.WO_DECORATION.value.Parameters.DEBUG: True})
pm4py.view_petri_net(net, im, fm)
#Instance spanning constraints:
net, im, fm = decision_mining.create_data_petri_nets_with_decisions(log, net, im, fm)
gviz = visualizer.apply(net, im, fm, parameters={visualizer.Variants.WO_DECORATION.value.Parameters.DEBUG: True})
pm4py.view_petri_net(net, im, fm)

#Guards:
for t in net.transitions:
    if "guard" in t.properties:
        print("")
        print(t)
        print(t.properties["guard"])




fitness = pm4py.fitness_alignments(log, net, im, fm)
print("the fitness is:" , fitness)
prec = pm4py.precision_alignments(log, net, im, fm)
print("the precision is ", prec)

#employeeID

import pandas as pd
import pm4py
from pm4py.visualization.petri_net import visualizer
from pm4py.algo.decision_mining import algorithm as decision_mining
from pm4py.algo.evaluation.generalization import algorithm as generalization_evaluator
from pm4py.algo.evaluation.simplicity import algorithm as simplicity_evaluator



log_scv = pm4py.format_dataframe(df, case_id='BankerID', activity_key='Activity', timestamp_key='lifecycle:transition')
pm4py.write_xes(log_scv, '/content/gdrive/MyDrive/Finalproject/thesis-newlog-2023/finaltest3/ft3-employeeID.xes')
log= pm4py.read_xes('/content/gdrive/MyDrive/Finalproject/thesis-newlog-2023/finaltest3/ft3-employeeID.xes')


#Inductive miner: 
net, im, fm = pm4py.discover_petri_net_inductive(log)
gviz = visualizer.apply(net, im, fm, parameters={visualizer.Variants.WO_DECORATION.value.Parameters.DEBUG: True})
pm4py.view_petri_net(net, im, fm)
#Instance spanning constraints:
net, im, fm = decision_mining.create_data_petri_nets_with_decisions(log, net, im, fm)
gviz = visualizer.apply(net, im, fm, parameters={visualizer.Variants.WO_DECORATION.value.Parameters.DEBUG: True})
pm4py.view_petri_net(net, im, fm)

#Guards:
for t in net.transitions:
    if "guard" in t.properties:
        print("")
        print(t)
        print(t.properties["guard"])




fitness = pm4py.fitness_alignments(log, net, im, fm)
print("the fitness is:" , fitness)
prec = pm4py.precision_alignments(log, net, im, fm)
print("the precision is ", prec)